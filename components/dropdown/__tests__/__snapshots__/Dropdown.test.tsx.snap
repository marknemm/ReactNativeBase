// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dropdown /> renders correctly when open with alternate label and value fields 1`] = `
<View
  style={
    {
      "marginBottom": 6.285714285714286,
      "paddingHorizontal": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "borderBottomColor": "#bbb",
        "borderBottomWidth": 1,
        "height": 98.9730612244898,
        "justifyContent": "center",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessible={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
          "height": 35,
          "justifyContent": "space-between",
        }
      }
    >
      <Text
        style={
          [
            {
              "flex": 1,
              "fontSize": 16,
              "writingDirection": "ltr",
            },
            {
              "color": "#86939e",
              "fontSize": 23.57142857142857,
            },
            {},
          ]
        }
      >
        Select item
      </Text>
      <Image
        source={1}
        style={
          {
            "height": 20,
            "tintColor": "gray",
            "width": 20,
          }
        }
      />
    </View>
    <Modal
      hardwareAccelerated={false}
      onRequestClose={[Function]}
      statusBarTranslucent={true}
      supportedOrientations={
        [
          "landscape",
          "portrait",
        ]
      }
      transparent={true}
      visible={true}
    >
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <View
          style={
            {
              "flex": 1,
              "paddingTop": 582,
            }
          }
        >
          <View
            style={
              {
                "backgroundColor": "white",
                "borderColor": "#EEEEEE",
                "borderWidth": 0.5,
                "elevation": 2,
                "flexShrink": 1,
                "left": 0,
                "maxHeight": 340,
                "minHeight": 0,
                "shadowColor": "#000",
                "shadowOffset": {
                  "height": 1,
                  "width": 0,
                },
                "shadowOpacity": 0.2,
                "shadowRadius": 1.41,
                "width": 360,
              }
            }
          >
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessible={true}
              focusable={false}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "flexShrink": 1,
                }
              }
            >
              <RCTScrollView
                accessibilityLabel="undefined flatlist"
                data={
                  [
                    {
                      "_index": 0,
                      "label": "item 1",
                      "labelAlt": "item 1 alt",
                      "value": "value 1",
                      "valueAlt": "value 1 alt",
                    },
                    {
                      "_index": 1,
                      "label": "item 2",
                      "labelAlt": "item 2 alt",
                      "value": "value 2",
                      "valueAlt": "value 2 alt",
                    },
                    {
                      "_index": 2,
                      "label": "item 3",
                      "labelAlt": "item 3 alt",
                      "value": "value 3",
                      "valueAlt": "value 3 alt",
                    },
                  ]
                }
                getItem={[Function]}
                getItemCount={[Function]}
                invertStickyHeaders={false}
                inverted={false}
                isInvertedVirtualizedList={false}
                keyExtractor={[Function]}
                keyboardShouldPersistTaps="handled"
                onContentSizeChange={[Function]}
                onLayout={[Function]}
                onMomentumScrollBegin={[Function]}
                onMomentumScrollEnd={[Function]}
                onScroll={[Function]}
                onScrollBeginDrag={[Function]}
                onScrollEndDrag={[Function]}
                onScrollToIndexFailed={[Function]}
                removeClippedSubviews={false}
                renderItem={[Function]}
                scrollEventThrottle={0.0001}
                showsVerticalScrollIndicator={true}
                stickyHeaderIndices={[]}
                testID="undefined flatlist"
                viewabilityConfigCallbackPairs={[]}
              >
                <View>
                  <View
                    onFocusCapture={[Function]}
                    onLayout={[Function]}
                    style={null}
                  >
                    <View
                      accessibilityLabel="item 1 alt"
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      testID="item 1 alt"
                    >
                      <View
                        style={
                          {
                            "backgroundColor": "#ffffff",
                          }
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "padding": 17,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#242424",
                                "flex": 1,
                                "fontSize": 16,
                                "writingDirection": "ltr",
                              }
                            }
                          >
                            item 1 alt
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                  <View
                    onFocusCapture={[Function]}
                    onLayout={[Function]}
                    style={null}
                  >
                    <View
                      accessibilityLabel="item 2 alt"
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      testID="item 2 alt"
                    >
                      <View
                        style={
                          {
                            "backgroundColor": "#ffffff",
                          }
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "padding": 17,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#242424",
                                "flex": 1,
                                "fontSize": 16,
                                "writingDirection": "ltr",
                              }
                            }
                          >
                            item 2 alt
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                  <View
                    onFocusCapture={[Function]}
                    onLayout={[Function]}
                    style={null}
                  >
                    <View
                      accessibilityLabel="item 3 alt"
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      testID="item 3 alt"
                    >
                      <View
                        style={
                          {
                            "backgroundColor": "#ffffff",
                          }
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "padding": 17,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#242424",
                                "flex": 1,
                                "fontSize": 16,
                                "writingDirection": "ltr",
                              }
                            }
                          >
                            item 3 alt
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </RCTScrollView>
            </View>
          </View>
        </View>
      </View>
    </Modal>
  </View>
</View>
`;

exports[`<Dropdown /> snapshots renders correctly 1`] = `
<View
  style={
    {
      "marginBottom": 6.285714285714286,
      "paddingHorizontal": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "borderBottomColor": "#bbb",
        "borderBottomWidth": 1,
        "height": 98.9730612244898,
        "justifyContent": "center",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessible={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
          "height": 35,
          "justifyContent": "space-between",
        }
      }
    >
      <Text
        style={
          [
            {
              "flex": 1,
              "fontSize": 16,
              "writingDirection": "ltr",
            },
            {
              "color": "#86939e",
              "fontSize": 23.57142857142857,
            },
            {},
          ]
        }
      >
        Select item
      </Text>
      <Image
        source={1}
        style={
          {
            "height": 20,
            "tintColor": "gray",
            "width": 20,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`<Dropdown /> snapshots renders correctly when open 1`] = `
<View
  style={
    {
      "marginBottom": 6.285714285714286,
      "paddingHorizontal": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "borderBottomColor": "#bbb",
        "borderBottomWidth": 1,
        "height": 98.9730612244898,
        "justifyContent": "center",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessible={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
          "height": 35,
          "justifyContent": "space-between",
        }
      }
    >
      <Text
        style={
          [
            {
              "flex": 1,
              "fontSize": 16,
              "writingDirection": "ltr",
            },
            {
              "color": "#86939e",
              "fontSize": 23.57142857142857,
            },
            {},
          ]
        }
      >
        Select item
      </Text>
      <Image
        source={1}
        style={
          {
            "height": 20,
            "tintColor": "gray",
            "width": 20,
          }
        }
      />
    </View>
    <Modal
      hardwareAccelerated={false}
      onRequestClose={[Function]}
      statusBarTranslucent={true}
      supportedOrientations={
        [
          "landscape",
          "portrait",
        ]
      }
      transparent={true}
      visible={true}
    >
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <View
          style={
            {
              "flex": 1,
              "paddingTop": 582,
            }
          }
        >
          <View
            style={
              {
                "backgroundColor": "white",
                "borderColor": "#EEEEEE",
                "borderWidth": 0.5,
                "elevation": 2,
                "flexShrink": 1,
                "left": 0,
                "maxHeight": 340,
                "minHeight": 0,
                "shadowColor": "#000",
                "shadowOffset": {
                  "height": 1,
                  "width": 0,
                },
                "shadowOpacity": 0.2,
                "shadowRadius": 1.41,
                "width": 360,
              }
            }
          >
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessible={true}
              focusable={false}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "flexShrink": 1,
                }
              }
            >
              <RCTScrollView
                accessibilityLabel="undefined flatlist"
                data={
                  [
                    {
                      "_index": 0,
                      "label": "item 1",
                      "labelAlt": "item 1 alt",
                      "value": "value 1",
                      "valueAlt": "value 1 alt",
                    },
                    {
                      "_index": 1,
                      "label": "item 2",
                      "labelAlt": "item 2 alt",
                      "value": "value 2",
                      "valueAlt": "value 2 alt",
                    },
                    {
                      "_index": 2,
                      "label": "item 3",
                      "labelAlt": "item 3 alt",
                      "value": "value 3",
                      "valueAlt": "value 3 alt",
                    },
                  ]
                }
                getItem={[Function]}
                getItemCount={[Function]}
                invertStickyHeaders={false}
                inverted={false}
                isInvertedVirtualizedList={false}
                keyExtractor={[Function]}
                keyboardShouldPersistTaps="handled"
                onContentSizeChange={[Function]}
                onLayout={[Function]}
                onMomentumScrollBegin={[Function]}
                onMomentumScrollEnd={[Function]}
                onScroll={[Function]}
                onScrollBeginDrag={[Function]}
                onScrollEndDrag={[Function]}
                onScrollToIndexFailed={[Function]}
                removeClippedSubviews={false}
                renderItem={[Function]}
                scrollEventThrottle={0.0001}
                showsVerticalScrollIndicator={true}
                stickyHeaderIndices={[]}
                testID="undefined flatlist"
                viewabilityConfigCallbackPairs={[]}
              >
                <View>
                  <View
                    onFocusCapture={[Function]}
                    onLayout={[Function]}
                    style={null}
                  >
                    <View
                      accessibilityLabel="item 1"
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      testID="item 1"
                    >
                      <View
                        style={
                          {
                            "backgroundColor": "#ffffff",
                          }
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "padding": 17,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#242424",
                                "flex": 1,
                                "fontSize": 16,
                                "writingDirection": "ltr",
                              }
                            }
                          >
                            item 1
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                  <View
                    onFocusCapture={[Function]}
                    onLayout={[Function]}
                    style={null}
                  >
                    <View
                      accessibilityLabel="item 2"
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      testID="item 2"
                    >
                      <View
                        style={
                          {
                            "backgroundColor": "#ffffff",
                          }
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "padding": 17,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#242424",
                                "flex": 1,
                                "fontSize": 16,
                                "writingDirection": "ltr",
                              }
                            }
                          >
                            item 2
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                  <View
                    onFocusCapture={[Function]}
                    onLayout={[Function]}
                    style={null}
                  >
                    <View
                      accessibilityLabel="item 3"
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      testID="item 3"
                    >
                      <View
                        style={
                          {
                            "backgroundColor": "#ffffff",
                          }
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "padding": 17,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#242424",
                                "flex": 1,
                                "fontSize": 16,
                                "writingDirection": "ltr",
                              }
                            }
                          >
                            item 3
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </RCTScrollView>
            </View>
          </View>
        </View>
      </View>
    </Modal>
  </View>
</View>
`;

exports[`<Dropdown /> snapshots renders correctly with label and placeholder 1`] = `
<View
  style={
    {
      "marginBottom": 6.285714285714286,
      "paddingHorizontal": 0,
    }
  }
>
  <Text
    accessibilityRole="text"
    style={
      {
        "color": "#86939e",
        "fontFamily": undefined,
        "fontSize": 23.57142857142857,
        "fontStyle": "normal",
        "fontWeight": "bold",
        "marginBottom": 0,
        "textAlign": "left",
        "textDecorationLine": "none",
        "textDecorationStyle": "solid",
      }
    }
  >
    Test Dropdown Label
  </Text>
  <View
    onLayout={[Function]}
    style={
      {
        "borderBottomColor": "#bbb",
        "borderBottomWidth": 1,
        "height": 98.9730612244898,
        "justifyContent": "center",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessible={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
          "height": 35,
          "justifyContent": "space-between",
        }
      }
    >
      <Text
        style={
          [
            {
              "flex": 1,
              "fontSize": 16,
              "writingDirection": "ltr",
            },
            {
              "color": "#86939e",
              "fontSize": 23.57142857142857,
            },
            {},
          ]
        }
      >
        Test Dropdown Placeholder
      </Text>
      <Image
        source={1}
        style={
          {
            "height": 20,
            "tintColor": "gray",
            "width": 20,
          }
        }
      />
    </View>
  </View>
</View>
`;
